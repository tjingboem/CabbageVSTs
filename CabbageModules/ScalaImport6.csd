;/****************************************************************************
ifno TbScala Sfil [, ibasefreq [, ibasekey [, ifn]]] 
Creates a table by reading a scala scale file (.scl)

Scale values are converted to decimal format useable by the cpstun(i) opcode.
Written by Thorin Kerr

ifno - Return number of generated table.
Sfil - scale file name (or path) in double quotes
ibasefreq - The base frequency of the scale in cycles per second (default = Csounds A4 value)
ibasekey - The integer index of the scale to which to assign basefreq unmodified (default = 69)
ifn - destination table number of the table. (default 0: generated by Csound)

Scala files are created on the Scale Workshop https://sevish.com/scaleworkshop/?version=2.5.7
****************************************************************************/

<Cabbage>
form caption("Scala File Import") size(1025, 310), pluginId("what"), bundle("./12 equal divisions of 2_1.scl"), colour("grey"), guiMode("queue")
filebutton bounds(140, 35, 80, 20), text("Scala File","Scala File"), fontColour:0("white"), fontColour:1("red"), channel("ScalaFilename"), shape("ellipse"), toFront()
keyboard bounds(8, 212, 1005, 95)
rslider bounds(330, 10, 72, 61), channel("resonance"), textColour(255, 255, 255, 255) range(0, 1, 0.5, 1, 0.01), text("res"),  colour(0, 0, 0, 255) 
rslider bounds(268, 10, 72, 61), channel("cutoff"), textColour(255, 255, 255, 255), text("cutoff"), colour(0, 0, 0, 255), range(0, 15000, 5000, 0.5, 0.001)
checkbox bounds(30, 40, 125, 10), colour:0(0, 0, 0), colour:1("red")channel("NewScale"), fontColour("white"), text("Use New Scale"), toFront()
hslider bounds(524, 10, 200, 61), channel("Pitch"), textColour(255, 255, 255, 255), text("pitch"), colour(0, 0, 255, 255), range(-100, 100, 0, 1, 0.001) valueTextBox(1)
rslider    bounds(204, 90, 70, 70), channel("AttTim"),    range(0.0001, 5, 0.5, 0.5, 0.001),       colour(90, 50, 50, 255), trackerColour(192, 192, 192, 255), text("Att.Tim"),   textColour(255, 255, 255, 255)
rslider    bounds(272, 90, 70, 70), channel("DecTim"),    range(0.0001, 1, 0.05, 0.5, 0.001), colour(90, 50, 50, 255), trackerColour(192, 192, 192, 255), text("Dec.Tim"),   textColour(255, 255, 255, 255)
rslider    bounds(342, 90, 70, 70), channel("Sustain"),    range(0.0001, 1, 0.8, 1, 0.001),       colour(90, 50, 50, 255), trackerColour(192, 192, 192, 255), text("Sustain"),   textColour(255, 255, 255, 255)
rslider    bounds(412, 90, 70, 70), channel("RelTim"),    range(0.0001, 5, 0.8, 0.5, 0.001), colour(90, 50, 50, 255), trackerColour(192, 192, 192, 255), text("Rel.Tim"),   textColour(255, 255, 255, 255)
rslider bounds(230, 10, 72, 61), channel("rate"), textColour(255, 255, 255, 255) range(0.05, 1, 0.5, 1, 0.01), text("rate"),  colour(0, 0, 0, 255) 
</Cabbage>

<CsoundSynthesizer>
<CsOptions>
-+rtmidi=NULL -M0 -m0d --midi-key=4 --midi-velocity-amp=5
</CsOptions>
<CsInstruments>

;sr =  48000
ksmps = 32     
nchnls = 2
0dbfs  = 1

opcode TbScala, i, Sjjo
ScalaFile, ibasefreq, ibasekey, ifn xin
    if filevalid(ScalaFile) == 0 then
        prints "TBScala not correct. File not found\n"
        idummy_ = 0
    else
        iline init 0
        inoncommentline init 0
        inumgrades init 0
        ipitwrites init 0
        ibasefreq = (ibasefreq == -1 ? A4 : ibasefreq)
        ibasekey = (ibasekey == -1 ? 69 : ibasekey)
    while iline != -1 do
        Sline, iline readfi ScalaFile
        istrlen strlen Sline
        if strchar:i(Sline) == 33 then
        ;
        elseif inoncommentline == 0 then                        ;;ignore commentlines
            inoncommentline += 1                                ;;; first non comment line is description
        elseif inoncommentline == 1 then
            inumgrades strtod strsub(Sline, 0, istrlen - 1)         ;;; second non comment line is numnotes
            ipitstore[] init inumgrades
            inoncommentline += 1
        else
            ipos init 0             ;; cents or ratio's from here
            istartslice init -1
            iendslice init -1
            icentformat init 0
        while ipos < istrlen do
            ichr strchar Sline, ipos
            if (ichr >= 45 && ichr < 58) then
                if (istartslice == -1) then
                    istartslice = ipos
                endif
            if (ichr == 46) then
                icentformat = 1
            endif
            elseif (istartslice >= 0 && iendslice == -1) then
                iendslice = ipos
                igoto breakout
            endif
        ipos += 1
    od

    breakout:
    if (istartslice != -1) then
        Ssegment strsub Sline, istartslice, iendslice
        if (icentformat == 1) then
            ipitval strtod Ssegment
        else
            idiv strindex Ssegment, "/"
            Snumer strsub Ssegment, 0, idiv
            Sdenom strsub Ssegment, idiv+1
            inumer strtod Snumer
            idenom = (idiv == -1 ? 1 : strtod:i(Sdenom)) 
            ipitval = inumer/idenom
        endif            
        ipitval = (icentformat == 1 ? (2 ^ (ipitval/1200)) : ipitval)
        ipitstore[ipitwrites] = ipitval
        ipitwrites += 1
    endif
   endif
    od

idummy_ ftgen ifn, 0, -(ipitwrites + 5), -2, inumgrades, ipitval, ibasefreq, ibasekey, 1
iarrstep init 0
while iarrstep < inumgrades do
    tablew ipitstore[iarrstep], iarrstep + 5, idummy_
    iarrstep += 1
od
endif
xout idummy_
endop 

        giScala TbScala "12 equal divisions of 2_1.scl"
        
instr 1

 iScala = giScala
 SFile chnget "ScalaFilename"
 iScale cabbageGetValue "NewScale"
 
 kres chnget "resonance"
 kcutoff chnget "cutoff"
 iatt chnget "AttTim"
 idec chnget "DecTim"
 isus chnget "Sustain"
 irel chnget "RelTim"

    if (iScale == 0) then
        prints "Standard Western scale: 12TET, midi key = %d\n", p4       
        iScala TbScala "12 equal divisions of 2_1.scl"  
    elseif (iScale == 1) then  
        ir filevalid SFile
        if (ir == 1) then
            iScala TbScala SFile
            prints "using the Scala File import, midi key = %d\n", p4
        endif
    endif 

 ihz cpstuni p4, iScala
 kenv   mxadsr   iatt, idec, isus, irel
; kbnd pchbend 0, 100                        ; pitchbend
; kbnd portk kbnd, .01                       ; smooth pitchbend
 kbnd chnget "Pitch"
 a1 vco2 p5, ihz+kbnd
 	aOut moogladder a1, kcutoff, kres
 outs aOut*kenv, aOut*kenv
endin

</CsInstruments>
<CsScore>

f0 z
</CsScore>
</CsoundSynthesizer>

